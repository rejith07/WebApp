pipeline {
        agent none
        tools {
          maven 'maven'
        }
   
        stages {

         stage ('Slack Notification - Start') {
          agent any
          steps {
           slackSend (color: '#FFFF00', message: "STARTED: Build Pipeline")
        }  
       }
        
          stage("Source code analysis") {
            agent any
            steps {
             withSonarQubeEnv('sonar') {
               sh 'mvn compile sonar:sonar -Dsonar.host.url=http://18.217.60.35:9000/ -Dsonar.sources=. -Dsonar.tests=. -Dsonar.test.inclusions=**/test/java/servlet/createpage_junit.java -Dsonar.exclusions=**/test/java/servlet/createpage_junit.java -Dsonar.login=admin -Dsonar.password=admin'
             }
             
            }
          } 
          stage("Maven build") {
             agent any
             steps {
               sh 'mvn compile'
               }
             }
        stage("Deploy to QA") {
                  agent any
                  steps {
                      script {
                          def rtMaven = Artifactory.newMavenBuild()
                          def buildInfo = rtMaven.run pom: 'pom.xml', goals: 'package'
                          def tc7 = tomcat7(url: 'http://18.191.153.44:8080/', credentialsId: 'tomcat')
                          deploy(adapters: [tc7], war: '**/*.war', contextPath: '/QAWebapp')
                      }
                  }
              }
        stage("Deploy to Artifactory") {
                  agent any
                  steps {
                      script {
                          def server = Artifactory.server 'artifactory'
                          def rtMaven = Artifactory.newMavenBuild()
                          rtMaven.deployer releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local', server: server
                          rtMaven.resolver releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot', server: server
                          rtMaven.deployer.artifactDeploymentPatterns.addInclude("*.war").addExclude("*.zip")
                          def buildInfo = rtMaven.run pom: 'pom.xml', goals: 'package'
                          server.publishBuildInfo buildInfo
                      }
                  }
              }  
         stage("Functional Test") {
                  agent any
                  steps { 
                      script {
                          def rtMaven = Artifactory.newMavenBuild()
                          def buildInfo = rtMaven.run pom: 'functionaltest/pom.xml', goals: 'test'
                          def tar = [allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '\\functionaltest\\target\\surefire-reports', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: '']
                          publishHTML(tar)
                      }
                  }
              } 
          stage("Performance Test") {
          agent any
            steps {
                     //sh "blazeMeterTest credentialsId: 'PerformaceTest', testId: '7895517.taurus', workspaceId: '461102'"
                     script {
                       blazeMeterTest credentialsId: 'PerformaceTest', testId: '7840673.taurus', workspaceId: '461131'
                     }
               }
             }
           stage('Jira'){
           agent any
            steps  {
                script{
                        step([$class: 'hudson.plugins.jira.JiraIssueUpdater', 
                       issueSelector: [$class: 'hudson.plugins.jira.selector.DefaultIssueSelector'], 
                        scm: [$class: 'GitSCM', branches: [[name: '*/master']], 
                         userRemoteConfigs: [[url: 'https://github.com/rejith07/WebApp.git']]]])
                    }
                 }
              }
        stage("Deploy to PROD") {
                  agent any
                  steps {
                      script {
                          def rtMaven = Artifactory.newMavenBuild()
                          def buildInfo = rtMaven.run pom: 'pom.xml', goals: 'package'
                          def tc7 = tomcat7(url: 'http://3.135.238.184:8080/', credentialsId: 'tomcat')
                          deploy(adapters: [tc7], war: '**/*.war', contextPath: '/PRODWebapp')
                      }
                  }
              }
        stage ('Slack Notification - Final') {
          agent any
          steps {
        // send build started notifications
        slackSend (color: '#FFFF00', message: "Completed: Build Pipeline Completed")
        }  
       }
     }
   }     
